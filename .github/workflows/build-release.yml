name: Build Release
on:
  push:
    tags:
      - v*
jobs:
  create-release:
    runs-on: 'ubuntu-latest'
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: true
  build:
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        platform:
          - 'linux-x64'
          - 'linux-musl-x64'
          - 'linux-arm'
          - 'linux-arm64'
          - 'win-x64'
          - 'win-x86'
          - 'win-arm64'
        experimental: [false]
        include:
          - os: macos-10.15
            platform: 'osx-x64'
            experimental: true
    steps:
      - name: Download previously built Docker image
        id: fetch-docker
        # Fetching artifacts from another pipeline, or even a different run of the same pipeline,
        # is currently not well-supported in Github Actions. We must use the Github REST API to
        # download the last successful uploaded artifact.
        run: |
          curl -s https://api.github.com/repos/${{ github.repository }}/actions/artifacts \
            | jq 'first(.artifacts | .[] | select(.name == "docker-${{ matrix.platform }}") | .archive_download_url)' -r \
            | xargs curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -s -L -o tmp.zip || exit 0
          unzip tmp.zip
          rm tmp.zip
          echo "::set-output name=docker_file_name::docker-${{ matrix.platform }}.tar.gz"
        if: startsWith(matrix.platform, 'linux')
      - name: Load relevant image locally
        run: docker load -i ${{ steps.fetch-docker.outputs.docker_file_name }} || echo "Could not load Docker image"
        if: steps.fetch-docker.outputs.docker_file_name != ''
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install dependencies (macOS)
        run: |
          pip3 install meson==0.55.3 ninja
          brew install advancecomp automake nasm pkg-config
        if: matrix.platform == 'osx-x64'
      - name: Build ${{ matrix.platform }}
        id: build-release
        run: |
          ./build.sh $(cat LIBVIPS_VERSION) ${{ matrix.platform }}
          echo "::set-output name=asset_file_name::libvips-$(cat LIBVIPS_VERSION)-${{ matrix.platform }}.tar.gz"
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.build-release.outputs.asset_file_name }}
          asset_name: ${{ steps.build-release.outputs.asset_file_name }}
          asset_content_type: application/gzip
      - name: Save Docker image
        run: docker save vips-dev-${{ matrix.platform }}:latest | gzip > docker-${{ matrix.platform }}.tar.gz
        if: startsWith(matrix.platform, 'linux')
      - name: Upload Docker image as build artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-${{ matrix.platform }}
          path: docker-${{ matrix.platform }}.tar.gz
        if: startsWith(matrix.platform, 'linux')
